Summary of project:

The file Project outline.pdf contains an explanation of how to use the program, and the file Readme.txt contains the command to start the program.

Our project allows the following:  Suppose a malicious person gets the apk for an android app currently on the google play store.  He can decompile the app and insert malicious code, but then it needs to be resigned (and recompiled) in order to be put on the play store.  To do so, he can simply open our program, and drag the root folder of the decompiled apk into the window, and our program will recompile and sign it.

There are two ways he can choose to sign it:
	The first way is to sign using the same details on the original certificate (the same first and last name, organizational unit, organization, city or locality, state, two-letter country code).  This way if someone compares the certificate to the app itself, it will seem legitimate.
	The second way is to sign using more “random but believable” certificate details.  To generate these, we first rip the developer website of the app from the play store website, and use wolfram alpha to determine the hosting location.  We also rip the company name from the play store website (aside - we have determined that as an alternative method, it would be straightforward to randomly pick a publicly traded company from a list downloaded from nasdaq.com and use Wolfram to determine the location of that company, instead of using the location of the dev website.  The tradeoff here would be that it may not be too difficult to determine that the randomly picked company would not make this app…).  Continuing, we now randomly generate a developer name based on the location we have determined.  We collected lists of common names from several countries, and we randomly pick a first and last name pair from the one of the lists depending on the location. (Note: we did not take the time to collect name data for every country, so we round to the nearest continent as proof of concept.)